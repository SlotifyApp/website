{
  "openapi": "3.0.0",
  "info": {
    "title": "Slotify API",
    "version": "1.0.0",
    "description": "API to communicate and schedule meetings with Microsoft."
  },
  "servers": [
    {
      "url": "http://localhost:8080"
    },
    {
      "url": "https://api.slotify.saath.dev"
    }
  ],
  "paths": {
    "/api/events": {
      "get": {
        "summary": "Subscribe to notifications eventstream.",
        "description": "Establishes a stream connection to receive real-time updates about rendering tasks via Server-Sent Events (SSE).",
        "operationId": "renderEvent",
        "responses": {
          "200": {
            "description": "A continuous stream of server-sent events.",
            "content": {
              "text/event-stream": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Notification"
                    }
                  }
                }
              }
            },
            "headers": {
              "Cache-Control": {
                "schema": {
                  "type": "string"
                },
                "description": "No caching is allowed for this stream."
              },
              "Connection": {
                "schema": {
                  "type": "string"
                },
                "description": "Advises the client to keep the connection open."
              },
              "Content-Type": {
                "schema": {
                  "type": "string"
                },
                "description": "The MIME type of this stream is text/event-stream."
              }
            }
          }
        }
      }
    },
    "/api/users/me/notifications": {
      "get": {
        "operationId": "GetAPIUsersMeNotifications",
        "summary": "Get user's unread notifications.",
        "responses": {
          "200": {
            "description": "Successfully updated notification.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Notification"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "description": "Notification not found."
          },
          "500": {
            "description": "Something went wrong internally",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/api/notifications/{notificationID}/read": {
      "patch": {
        "summary": "Mark a notification as being read.",
        "operationId": "PatchAPINotificationsNotificationIDRead",
        "parameters": [
          {
            "in": "path",
            "name": "notificationID",
            "schema": {
              "type": "integer",
              "format": "uint32"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully updated notification",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "description": "Notification not found."
          },
          "500": {
            "description": "Something went wrong internally",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/api/calendar/{userID}": {
      "get": {
        "operationId": "GetAPICalendarUserID",
        "summary": "Get a specific user's calendar events for a given time range.",
        "parameters": [
          {
            "in": "query",
            "name": "start",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "end",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "userID",
            "schema": {
              "type": "integer",
              "format": "uint32"
            },
            "required": true,
            "description": "Numeric ID of the user to get"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully got user calendar events",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CalendarEvent"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "500": {
            "description": "Something went wrong internally",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "502": {
            "description": "Something went wrong with an external API",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/api/calendar/me": {
      "get": {
        "operationId": "GetAPICalendarMe",
        "summary": "Get a user's calendar events for a given time range.",
        "parameters": [
          {
            "in": "query",
            "name": "start",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "end",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully got user calendar events",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CalendarEvent"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "500": {
            "description": "Something went wrong internally",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "502": {
            "description": "Something went wrong with an external API",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "post": {
        "operationId": "PostAPICalendarMe",
        "summary": "Create a new calendar event.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CalendarEvent"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Event successfully created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CalendarEvent"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "500": {
            "description": "Something went wrong internally",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "502": {
            "description": "Something went wrong with an external API",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/api/calendar/event": {
      "get": {
        "operationId": "GetAPICalendarEvent",
        "summary": "Get calendar event by microsoft id.",
        "parameters": [
          {
            "in": "query",
            "name": "msftID",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully got user calendar events",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CalendarEvent"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "500": {
            "description": "Something went wrong internally",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "502": {
            "description": "Something went wrong with an external API",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/api/refresh": {
      "post": {
        "operationId": "PostAPIRefresh",
        "summary": "Refresh Slotify access token and refresh token.",
        "responses": {
          "201": {
            "description": "Successfully refreshed access token",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/api/auth/callback": {
      "get": {
        "operationId": "GetAPIAuthCallback",
        "summary": "Auth route for authorisation code flow.",
        "parameters": [
          {
            "in": "query",
            "name": "code",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "state",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "302": {
            "description": "Successful auth",
            "headers": {
              "Location": {
                "description": "The URL to redirect to after successful authentication",
                "schema": {
                  "type": "string",
                  "example": "http://localhost:3000/dashboard"
                }
              }
            }
          }
        }
      }
    },
    "/api/healthcheck": {
      "get": {
        "operationId": "GetAPIHealthcheck",
        "summary": "Healthcheck route.",
        "responses": {
          "200": {
            "description": "Healthcheck successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/api/users/me/logout": {
      "post": {
        "operationId": "PostAPIUsersMeLogout",
        "summary": "Logout user.",
        "responses": {
          "200": {
            "description": "Successfully logged out on backend",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/api/users/me": {
      "get": {
        "operationId": "GetAPIUsersMe",
        "summary": "Get current user's details.",
        "responses": {
          "200": {
            "description": "Got user successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (e.g., invalid slotifyGroup ID)"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "description": "User not found"
          }
        }
      }
    },
    "/api/users": {
      "get": {
        "operationId": "GetAPIUsers",
        "summary": "Search for users with by email and name. MUST provide one of the query params. Returns a max of 10 searches.",
        "parameters": [
          {
            "in": "query",
            "name": "email",
            "schema": {
              "type": "string"
            },
            "description": "Partial email of user to search for"
          },
          {
            "in": "query",
            "name": "name",
            "schema": {
              "type": "string"
            },
            "description": "Partial name of user to search for"
          }
        ],
        "responses": {
          "200": {
            "description": "Users matching the given query parameter.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/User"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request (e.g., invalid slotifyGroup ID)"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "500": {
            "description": "Something went wrong internally"
          }
        }
      },
      "post": {
        "operationId": "PostAPIUsers",
        "summary": "Create a new user.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserCreate"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (e.g., invalid slotifyGroup ID)"
          }
        }
      }
    },
    "/api/users/{userID}": {
      "get": {
        "operationId": "GetAPIUsersUserID",
        "summary": "Get a user by id.",
        "parameters": [
          {
            "in": "path",
            "name": "userID",
            "schema": {
              "type": "integer",
              "format": "uint32"
            },
            "required": true,
            "description": "Numeric ID of the user to get"
          }
        ],
        "responses": {
          "200": {
            "description": "Got user successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (e.g., invalid slotifyGroup ID)"
          },
          "404": {
            "description": "User not found"
          }
        }
      },
      "delete": {
        "operationId": "DeleteAPIUsersUserID",
        "summary": "Delete a user by id.",
        "parameters": [
          {
            "in": "path",
            "name": "userID",
            "schema": {
              "type": "integer",
              "format": "uint32"
            },
            "required": true,
            "description": "Numeric ID of the user to delete"
          }
        ],
        "responses": {
          "200": {
            "description": "Deleted user successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (e.g., invalid user ID)"
          },
          "404": {
            "description": "User not found"
          }
        }
      }
    },
    "/api/invites/me": {
      "get": {
        "operationId": "GetAPIInvitesMe",
        "summary": "Get all invites for logged in user、requires pageToken.",
        "parameters": [
          {
            "in": "query",
            "name": "status",
            "schema": {
              "$ref": "#/components/schemas/InviteStatus"
            },
            "description": "Invite status"
          }
        ],
        "responses": {
          "200": {
            "description": "Got all user's invites successfully with pageToken.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/InvitesMe"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "description": "User not found"
          }
        }
      }
    },
    "/api/invites/{inviteID}": {
      "patch": {
        "operationId": "PatchAPIInvitesInviteID",
        "summary": "Update an invite with a new message",
        "parameters": [
          {
            "in": "path",
            "name": "inviteID",
            "schema": {
              "type": "integer",
              "format": "uint32"
            },
            "required": true,
            "description": "Numeric ID of the invite to update"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "message": {
                    "type": "string"
                  }
                },
                "required": [
                  "message"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated the invite message successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "description": "Invite not found"
          },
          "500": {
            "description": "Something went wrong internally"
          }
        }
      },
      "delete": {
        "operationId": "DeleteAPIInvitesInviteID",
        "summary": "Delete an invite",
        "parameters": [
          {
            "in": "path",
            "name": "inviteID",
            "schema": {
              "type": "integer",
              "format": "uint32"
            },
            "required": true,
            "description": "Numeric ID of the invite to update"
          }
        ],
        "responses": {
          "200": {
            "description": "Deleted the invite successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "description": "Invite not found"
          },
          "500": {
            "description": "Something went wrong internally"
          }
        }
      }
    },
    "/api/invites/{inviteID}/decline": {
      "patch": {
        "operationId": "PatchAPIInvitesInviteIDDecline",
        "summary": "Decline an invite",
        "parameters": [
          {
            "in": "path",
            "name": "inviteID",
            "schema": {
              "type": "integer",
              "format": "uint32"
            },
            "required": true,
            "description": "Numeric ID of the invite to update"
          }
        ],
        "responses": {
          "201": {
            "description": "Decline invite successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "description": "Invite not found"
          },
          "500": {
            "description": "Something went wrong internally"
          }
        }
      }
    },
    "/api/invites/{inviteID}/accept": {
      "patch": {
        "operationId": "PatchAPIInvitesInviteIDAccept",
        "summary": "Accept a new group invite and add member to slotify group.",
        "parameters": [
          {
            "in": "path",
            "name": "inviteID",
            "schema": {
              "type": "integer",
              "format": "uint32"
            },
            "required": true,
            "description": "Numeric ID of the invite to update"
          }
        ],
        "responses": {
          "201": {
            "description": "Accepted invite successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "description": "Invite not found"
          },
          "500": {
            "description": "Something went wrong internally"
          }
        }
      }
    },
    "/api/invites": {
      "post": {
        "operationId": "PostAPIInvites",
        "summary": "Create a new invite",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InviteCreate"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created an invite successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvitesGroup"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "description": "Slotify group not found"
          },
          "500": {
            "description": "Something went wrong internally"
          }
        }
      }
    },
    "/api/slotify-groups/{slotifyGroupID}/invites": {
      "get": {
        "operationId": "GetAPISlotifyGroupsSlotifyGroupIDInvites",
        "summary": "Get all invites for a slotify group",
        "parameters": [
          {
            "in": "query",
            "name": "status",
            "schema": {
              "$ref": "#/components/schemas/InviteStatus"
            },
            "description": "Invite status"
          },
          {
            "in": "path",
            "name": "slotifyGroupID",
            "schema": {
              "type": "integer",
              "format": "uint32"
            },
            "required": true,
            "description": "Numeric ID of the slotifyGroup to get invites from"
          },
          {
            "in": "query",
            "name": "pageToken",
            "schema": {
              "type": "integer",
              "format": "uint32"
            },
            "required": false
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Got all a group's invites successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "invites",
                    "nextPageToken"
                  ],
                  "properties": {
                    "invites": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/InvitesGroup"
                      }
                    },
                    "nextPageToken": {
                      "type": "integer",
                      "format": "uint32"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "description": "Slotify group not found"
          }
        }
      }
    },
    "/api/slotify-groups/{slotifyGroupID}/leave/me": {
      "delete": {
        "operationId": "DeleteSlotifyGroupsSlotifyGroupIDLeaveMe",
        "summary": "Have a member leave from a slotify group",
        "parameters": [
          {
            "in": "path",
            "name": "slotifyGroupID",
            "schema": {
              "type": "integer",
              "format": "uint32"
            },
            "required": true,
            "description": "Numeric ID of the slotifyGroup to have the user leave from."
          }
        ],
        "responses": {
          "200": {
            "description": "The user successfully left the slotify group",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "description": "Slotify group not found"
          }
        }
      }
    },
    "/api/slotify-groups/me": {
      "get": {
        "operationId": "GetAPISlotifyGroupsMe",
        "summary": "Get all slotify-groups for current user.",
        "parameters": [
          {
            "in": "query",
            "name": "pageToken",
            "schema": {
              "type": "integer",
              "format": "uint32"
            },
            "required": false
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Got all user's slotify-groups successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "slotifyGroups",
                    "nextPageToken"
                  ],
                  "properties": {
                    "slotifyGroups": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/SlotifyGroup"
                      }
                    },
                    "nextPageToken": {
                      "type": "integer",
                      "format": "uint32"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "description": "User not found"
          }
        }
      }
    },
    "/api/slotify-groups": {
      "post": {
        "operationId": "PostAPISlotifyGroups",
        "summary": "Create a new slotifyGroup.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SlotifyGroupCreate"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "SlotifyGroup created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SlotifyGroup"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "400": {
            "description": "Bad request (e.g., invalid slotifyGroup name)",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/api/slotify-groups/{slotifyGroupID}": {
      "delete": {
        "operationId": "DeleteAPISlotifyGroupsSlotifyGroupID",
        "summary": "Delete a slotifyGroup by id.",
        "parameters": [
          {
            "in": "path",
            "name": "slotifyGroupID",
            "schema": {
              "type": "integer",
              "format": "uint32"
            },
            "required": true,
            "description": "Numeric ID of the slotifyGroup to delete"
          }
        ],
        "responses": {
          "200": {
            "description": "Deleted slotifyGroup successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "400": {
            "description": "Bad request (e.g., invalid slotifyGroup id)"
          },
          "404": {
            "description": "SlotifyGroup not found"
          }
        }
      },
      "get": {
        "operationId": "GetAPISlotifyGroupsSlotifyGroupID",
        "summary": "Get a slotifyGroup by id.",
        "parameters": [
          {
            "in": "path",
            "name": "slotifyGroupID",
            "schema": {
              "type": "integer",
              "format": "uint32"
            },
            "required": true,
            "description": "Numeric ID of the slotifyGroup to get"
          }
        ],
        "responses": {
          "200": {
            "description": "Got slotifyGroup successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SlotifyGroup"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "description": "SlotifyGroup not found"
          },
          "500": {
            "description": "Something went wrong internally"
          }
        }
      }
    },
    "/api/slotify-groups/{slotifyGroupID}/users": {
      "get": {
        "summary": "Get all members of a slotifyGroup.",
        "operationId": "GetAPISlotifyGroupsSlotifyGroupIDUsers",
        "parameters": [
          {
            "in": "path",
            "name": "slotifyGroupID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "uint32"
            },
            "description": "ID of the slotifyGroup"
          },
          {
            "in": "query",
            "name": "pageToken",
            "schema": {
              "type": "integer",
              "format": "uint32"
            },
            "required": false
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Users successfully found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "users",
                    "nextPageToken"
                  ],
                  "properties": {
                    "users": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/User"
                      }
                    },
                    "nextPageToken": {
                      "type": "integer",
                      "format": "uint32"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "description": "Bad request, slotifyGroup id is invalid",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/api/scheduling/slots": {
      "post": {
        "operationId": "PostAPISchedulingSlots",
        "summary": "Idempotent route, just returns appropriate time slots along with their respective ratings.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SchedulingSlotsBodySchema"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/SchedulingSlotsSuccessResponse"
          },
          "400": {
            "description": "Bad request (e.g., invalid event data)",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "500": {
            "description": "Something went wrong internally",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/api/reschedule/check": {
      "post": {
        "operationId": "PostAPIRescheduleCheck",
        "summary": "Check if the old meeting can be rescheduled",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReschedulingCheckBodySchema"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully checked reschedule status",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "isNewMeetingMoreImportant": {
                      "type": "boolean",
                      "description": "True if the new meeting if more important than the old meeting"
                    },
                    "canBeRescheduled": {
                      "type": "boolean",
                      "description": "true if there are valid meeting slots for the old meeting to change to"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request (e.g., invalid event data)",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "500": {
            "description": "Something went wrong internally",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/api/reschedule/requests/me": {
      "get": {
        "operationId": "GetAPIRescheduleRequestsMe",
        "summary": "Get all reschedule requests for current user.",
        "responses": {
          "200": {
            "$ref": "#/components/responses/RescheduleRequests"
          },
          "400": {
            "description": "Bad request (e.g., invalid event data)",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "500": {
            "description": "Something went wrong internally",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/api/reschedule/request/{requestID}": {
      "get": {
        "operationId": "GetAPIRescheduleRequestRequestID",
        "summary": "Get all reschedule requests by request id.",
        "parameters": [
          {
            "in": "path",
            "name": "requestID",
            "schema": {
              "type": "integer",
              "format": "uint32"
            },
            "required": true,
            "description": "Numeric ID of the reschedule request to get"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully get the reschedule request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RescheduleRequest"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (e.g., invalid event data)",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "500": {
            "description": "Something went wrong internally",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/api/reschedule/request/{requestID}/reject": {
      "patch": {
        "operationId": "PatchAPIRescheduleRequestRequestIDReject",
        "summary": "Reject a reschedule request by id.",
        "parameters": [
          {
            "in": "path",
            "name": "requestID",
            "schema": {
              "type": "integer",
              "format": "uint32"
            },
            "required": true,
            "description": "Numeric ID of the reschedule request to get"
          }
        ],
        "responses": {
          "201": {
            "description": "Successfully rejected the rescheduling request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "description": "Invite not found"
          },
          "500": {
            "description": "Something went wrong internally"
          }
        }
      }
    },
    "/api/reschedule/request/{requestID}/accept": {
      "patch": {
        "operationId": "PatchAPIRescheduleRequestRequestIDAccept",
        "summary": "Accept a reschedule request by request id.",
        "parameters": [
          {
            "in": "path",
            "name": "requestID",
            "schema": {
              "type": "integer",
              "format": "uint32"
            },
            "required": true,
            "description": "Numeric ID of the reschedule request to get"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReschedulingRequestAcceptBodySchema"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successfully accepted the rescheduling request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "description": "Invite not found"
          },
          "500": {
            "description": "Something went wrong internally"
          }
        }
      }
    },
    "/api/reschedule/request/replace": {
      "post": {
        "operationId": "PostAPIRescheduleRequestReplace",
        "summary": "Create a request to reschedule the old meeting for a new meeting.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReschedulingRequestBodySchema"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully requested to reschedule the old meeting",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (e.g., invalid event data)",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "500": {
            "description": "Something went wrong internally",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/api/reschedule/request/single": {
      "post": {
        "operationId": "PostAPIRescheduleRequestSingle",
        "summary": "Request to reschedule the old meeting by itself",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReschedulingRequestSingleBodySchema"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully requested to reschedule the old meeting",
            "content": {
              "application/json": {
                "schema": {
                  "type": "number"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (e.g., invalid event data)",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "500": {
            "description": "Something went wrong internally",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/api/msft-groups/me": {
      "get": {
        "operationId": "GetAPIMSFTGroupsMe",
        "summary": "Get all Microsoft groups's id for current user.",
        "responses": {
          "200": {
            "description": "Got all user's Microsoft groups successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "description": "User not found"
          }
        }
      }
    },
    "/api/msft-groups": {
      "get": {
        "operationId": "GetAPIMSFTGroups",
        "summary": "Get a Microsoft group by query params.",
        "parameters": [
          {
            "in": "query",
            "name": "name",
            "schema": {
              "type": "string"
            },
            "description": "Microsoft group name"
          }
        ],
        "responses": {
          "200": {
            "description": "Microsoft groups matching the query parameters",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MSFTGroup"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request (e.g., invalid microsoft group name)"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "502": {
            "description": "Something went wrong with an external API",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/api/msft-groups/{groupID}": {
      "get": {
        "operationId": "GetAPIMSFTGroupsGroupID",
        "summary": "Get a Microsoft group by id.",
        "parameters": [
          {
            "in": "path",
            "name": "groupID",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Numeric ID of the Microsoft group to get"
          }
        ],
        "responses": {
          "200": {
            "description": "Got Microsoft group successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MSFTGroup"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "description": "Microsoft group not found"
          },
          "500": {
            "description": "Something went wrong internally"
          },
          "502": {
            "description": "Something went wrong with an external API",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/api/msft-groups/{groupID}/users": {
      "get": {
        "summary": "Get all members of a Microsoft group.",
        "operationId": "GetAPIMSFTGroupsGroupIDUsers",
        "parameters": [
          {
            "in": "path",
            "name": "groupID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "ID of the Microsoft group"
          },
          {
            "in": "query",
            "name": "nextLink",
            "schema": {
              "type": "string"
            },
            "required": false
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Users successfully found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "users",
                    "nextPageToken"
                  ],
                  "properties": {
                    "users": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/MSFTUser"
                      }
                    },
                    "nextLink": {
                      "type": "string",
                      "nullable": true
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "description": "Bad request, Microsoft group id is invalid",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong internally",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "502": {
            "description": "Something went wrong with an external API",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/api/rooms/all": {
      "get": {
        "summary": "Get all possible rooms.",
        "operationId": "GetAPIRoomsAll",
        "responses": {
          "200": {
            "description": "Users successfully found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Room"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "description": "Failed to get rooms from Microsoft"
          },
          "500": {
            "description": "Something went wrong internally",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "502": {
            "description": "Something went wrong with an external API",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/api/msft-users/search": {
      "get": {
        "summary": "Get users from Microsoft based on name and email",
        "operationId": "GetAPIMSFTUsersSearch",
        "parameters": [
          {
            "in": "query",
            "name": "search",
            "schema": {
              "type": "string"
            },
            "description": "Search parameter for Microsoft users, can be first name, surname, or email"
          },
          {
            "in": "query",
            "name": "nextLink",
            "schema": {
              "type": "string"
            },
            "required": false
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Users successfully found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "users",
                    "nextPageToken"
                  ],
                  "properties": {
                    "users": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/MSFTUser"
                      }
                    },
                    "nextLink": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "description": "Failed to get users from Microsoft"
          },
          "500": {
            "description": "Something went wrong internally",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "502": {
            "description": "Something went wrong with an external API",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/api/msft-users": {
      "get": {
        "summary": "Get all users from Microsoft",
        "operationId": "GetAPIMSFTUsers",
        "parameters": [
          {
            "in": "query",
            "name": "nextLink",
            "schema": {
              "type": "string"
            },
            "required": false
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Users successfully found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "users",
                    "nextPageToken"
                  ],
                  "properties": {
                    "users": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/MSFTUser"
                      }
                    },
                    "nextLink": {
                      "type": "string",
                      "nullable": true
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "description": "Failed to get users from Microsoft"
          },
          "500": {
            "description": "Something went wrong internally",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "502": {
            "description": "Something went wrong with an external API",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "responses": {
      "SchedulingSlotsSuccessResponse": {
        "description": "Scheduling algorithm returns the valid time slots and their respective ratings.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/SchedulingSlotsSuccessResponseBody"
            }
          }
        }
      },
      "RescheduleRequests": {
        "description": "All the reschedule requests for the current user",
        "content": {
          "application/json": {
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/RescheduleRequest"
              }
            }
          }
        }
      },
      "UnauthorizedError": {
        "description": "Access token is missing or invalid"
      }
    },
    "schemas": {
      "TimeConstraint": {
        "description": "Maps directly to [MSFT timeConstraint](https://learn.microsoft.com/en-us/graph/api/resources/timeconstraint?view=graph-rest-1.0)",
        "type": "object",
        "properties": {
          "activityDomain": {
            "type": "string"
          },
          "timeSlots": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MeetingTimeSlot"
            }
          }
        },
        "required": [
          "timeSlots"
        ]
      },
      "RescheduleRequest": {
        "description": "Reschedule request object",
        "type": "object",
        "required": [
          "request_id",
          "requested_by",
          "status",
          "requested_at",
          "oldMeeting"
        ],
        "properties": {
          "request_id": {
            "type": "integer",
            "format": "uint32",
            "description": "The request ID"
          },
          "requested_by": {
            "type": "integer",
            "format": "uint32",
            "description": "The user ID of the person who requested the reschedule"
          },
          "status": {
            "type": "string",
            "description": "The status of the reschedule request"
          },
          "requested_at": {
            "type": "string",
            "format": "date-time",
            "description": "The time the request was made"
          },
          "oldMeeting": {
            "$ref": "#/components/schemas/ReschedulingRequestOldMeeting"
          },
          "newMeeting": {
            "$ref": "#/components/schemas/ReschedulingRequestNewMeeting"
          }
        }
      },
      "ReschedulingRequestAcceptBodySchema": {
        "type": "object",
        "required": [
          "newStartTime",
          "newEndTime"
        ],
        "properties": {
          "newStartTime": {
            "type": "string",
            "format": "date-time",
            "description": "The start of the meeting denoted in *ISO 8601* format In the format: yyyy-mm-ddThh:mm:ssZ Where lowercase letters are replaced by their numerical values\n"
          },
          "newEndTime": {
            "type": "string",
            "format": "date-time",
            "description": "The start of the meeting denoted in *ISO 8601* format In the format: yyyy-mm-ddThh:mm:ssZ Where lowercase letters are replaced by their numerical values\n"
          }
        }
      },
      "ReschedulingRequestOldMeeting": {
        "type": "object",
        "required": [
          "msftMeetingID",
          "meetingId"
        ],
        "properties": {
          "msftMeetingID": {
            "type": "string",
            "description": "The microsoft meeting ID of the old meeting"
          },
          "meetingId": {
            "type": "integer",
            "format": "uint32",
            "description": "The meeting ID of the old meeting"
          }
        }
      },
      "ReschedulingRequestNewMeeting": {
        "type": "object",
        "required": [
          "title",
          "meetingDuration",
          "startTime",
          "endTime",
          "location"
        ],
        "properties": {
          "title": {
            "type": "string",
            "description": "name of the meeting"
          },
          "meetingDuration": {
            "type": "string",
            "description": "The length of the meeting, denoted in **ISO 8601** format. - Example:\n  - **1 hour** → `'PT1H'`\n  - **2 hours, 30 minutes** → `'PT2H30M'`\n- `'P'` is the duration designator. - `'T'` separates date and time components. - `'H'` (hours) and `'M'` (minutes) specify the time duration. - If omitted, the default duration is **30 minutes** (`'PT30M'`).\n",
            "example": "PT2H30M"
          },
          "startTime": {
            "type": "string",
            "format": "date-time",
            "description": "The start of the meeting denoted in *ISO 8601* format In the format: yyyy-mm-ddThh:mm:ssZ Where lowercase letters are replaced by their numerical values\n"
          },
          "endTime": {
            "type": "string",
            "format": "date-time",
            "description": "The start of the meeting denoted in *ISO 8601* format In the format: yyyy-mm-ddThh:mm:ssZ Where lowercase letters are replaced by their numerical values\n"
          },
          "location": {
            "type": "string",
            "description": "The location of the meeting"
          }
        }
      },
      "ReschedulingCheckBodySchema": {
        "description": "Request body of the details of the two meetings",
        "type": "object",
        "required": [
          "newMeeting",
          "oldMeeting"
        ],
        "properties": {
          "newMeeting": {
            "type": "object",
            "required": [
              "title",
              "meetingDuration",
              "attendees"
            ],
            "properties": {
              "title": {
                "type": "string",
                "description": "name of the meeting"
              },
              "meetingDuration": {
                "type": "string",
                "description": "The length of the meeting, denoted in **ISO 8601** format. - Example:\n  - **1 hour** → `'PT1H'`\n  - **2 hours, 30 minutes** → `'PT2H30M'`\n- `'P'` is the duration designator. - `'T'` separates date and time components. - `'H'` (hours) and `'M'` (minutes) specify the time duration. - If omitted, the default duration is **30 minutes** (`'PT30M'`).\n",
                "example": "PT2H30M"
              },
              "attendees": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AttendeeBase"
                },
                "description": "Array of all the attendees"
              }
            }
          },
          "oldMeeting": {
            "type": "object",
            "required": [
              "msftMeetingID"
            ],
            "properties": {
              "msftMeetingID": {
                "type": "string",
                "description": "The microsoft meeting ID of the old meeting if it exists"
              },
              "isOrganizerOptional": {
                "type": "boolean",
                "default": false,
                "description": "if organizer does not need to be there, then set true. If the organizer is the only person in the meeting, keep false"
              }
            }
          }
        }
      },
      "ReschedulingRequestBodySchema": {
        "description": "Request body of the details of the two meetings",
        "type": "object",
        "required": [
          "newMeeting",
          "oldMeeting"
        ],
        "properties": {
          "newMeeting": {
            "type": "object",
            "required": [
              "title",
              "meetingDuration",
              "attendees",
              "startTime",
              "endTime",
              "location",
              "startRangeTime",
              "endRangeTime"
            ],
            "properties": {
              "title": {
                "type": "string",
                "description": "name of the meeting"
              },
              "meetingDuration": {
                "type": "string",
                "description": "The length of the meeting, denoted in **ISO 8601** format. - Example:\n  - **1 hour** → `'PT1H'`\n  - **2 hours, 30 minutes** → `'PT2H30M'`\n- `'P'` is the duration designator. - `'T'` separates date and time components. - `'H'` (hours) and `'M'` (minutes) specify the time duration. - If omitted, the default duration is **30 minutes** (`'PT30M'`).\n",
                "example": "PT2H30M"
              },
              "attendees": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "description": "user ID of participants"
                },
                "description": "Array of all the attendees user id"
              },
              "startTime": {
                "type": "string",
                "format": "date-time",
                "description": "The start of the meeting denoted in *ISO 8601* format In the format: yyyy-mm-ddThh:mm:ssZ Where lowercase letters are replaced by their numerical values\n"
              },
              "endTime": {
                "type": "string",
                "format": "date-time",
                "description": "The start of the meeting denoted in *ISO 8601* format In the format: yyyy-mm-ddThh:mm:ssZ Where lowercase letters are replaced by their numerical values\n"
              },
              "location": {
                "type": "string",
                "description": "The location of the meeting"
              },
              "startRangeTime": {
                "type": "string",
                "format": "date-time",
                "description": "The start of the meeting denoted in *ISO 8601* format In the format: yyyy-mm-ddThh:mm:ssZ Where lowercase letters are replaced by their numerical values\n"
              },
              "endRangeTime": {
                "type": "string",
                "format": "date-time",
                "description": "The start of the meeting denoted in *ISO 8601* format In the format: yyyy-mm-ddThh:mm:ssZ Where lowercase letters are replaced by their numerical values\n"
              }
            }
          },
          "oldMeeting": {
            "type": "object",
            "required": [
              "msftMeetingID",
              "meetingStartTime",
              "meetingOwner"
            ],
            "properties": {
              "msftMeetingID": {
                "type": "string",
                "description": "The microsoft meeting ID of the old meeting"
              },
              "meetingStartTime": {
                "type": "string",
                "format": "date-time",
                "description": "The start of the meeting denoted in *ISO 8601* format"
              },
              "meetingOwner": {
                "type": "integer",
                "description": "Meeting owner ID"
              }
            }
          }
        }
      },
      "ReschedulingRequestSingleBodySchema": {
        "description": "Request body of the details of the old meeting",
        "type": "object",
        "required": [
          "msftMeetingID"
        ],
        "properties": {
          "msftMeetingID": {
            "type": "string",
            "description": "The microsoft meeting ID of the old meeting"
          }
        }
      },
      "SchedulingSlotsBodySchema": {
        "description": "Roughly maps to [MSFT Find Meeting Schema](https://learn.microsoft.com/en-us/graph/api/user-findmeetingtimes?view=graph-rest-1.0&tabs=http#request-body)",
        "type": "object",
        "properties": {
          "attendees": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AttendeeBase"
            }
          },
          "meetingName": {
            "description": "custom field, this is used for the AI model",
            "type": "string"
          },
          "meetingDuration": {
            "type": "string",
            "description": "The length of the meeting, denoted in **ISO 8601** format. - Example:\n  - **1 hour** → `'PT1H'`\n  - **2 hours, 30 minutes** → `'PT2H30M'`\n- `'P'` is the duration designator. - `'T'` separates date and time components. - `'H'` (hours) and `'M'` (minutes) specify the time duration. - If omitted, the default duration is **30 minutes** (`'PT30M'`).\n",
            "example": "PT2H30M"
          },
          "isOrganizerOptional": {
            "type": "boolean"
          },
          "locationConstraint": {
            "$ref": "#/components/schemas/LocationConstraint"
          },
          "minimumAttendeePercentage": {
            "type": "number",
            "format": "double"
          },
          "maxCandidates": {
            "type": "integer",
            "format": "int32"
          },
          "timeConstraint": {
            "$ref": "#/components/schemas/TimeConstraint"
          }
        },
        "required": [
          "attendees",
          "isOrganizerOptional",
          "locationConstraint",
          "meetingDuration",
          "meetingName",
          "timeConstraint"
        ]
      },
      "PhysicalAddress": {
        "description": "Maps directly to [MSFT physicalAddress](https://learn.microsoft.com/en-us/graph/api/resources/locationconstraintitem?view=graph-rest-1.0)",
        "properties": {
          "city": {
            "type": "string",
            "description": "The city."
          },
          "countryOrRegion": {
            "type": "string",
            "description": "The country or region. It's a free-format string value, for example, \"United States\"."
          },
          "postalCode": {
            "type": "string",
            "description": "The postal code."
          },
          "state": {
            "type": "string",
            "description": "The state."
          },
          "street": {
            "type": "string",
            "description": "The street."
          }
        }
      },
      "LocationConstraintItem": {
        "description": "Maps roughly to [MSFT locationConstraintItem](https://learn.microsoft.com/en-us/graph/api/resources/locationconstraintitem?view=graph-rest-1.0)",
        "type": "object",
        "properties": {
          "displayName": {
            "type": "string"
          },
          "resolveAvailability": {
            "type": "boolean"
          },
          "locationEmailAddress": {
            "type": "string"
          },
          "address": {
            "$ref": "#/components/schemas/PhysicalAddress"
          }
        },
        "required": [
          "displayName",
          "resolveAvailability",
          "address"
        ]
      },
      "LocationConstraint": {
        "description": "Maps directly to [MSFT locationConstraint](https://learn.microsoft.com/en-us/graph/api/resources/locationconstraint?view=graph-rest-1.0)",
        "type": "object",
        "properties": {
          "isRequired": {
            "type": "boolean"
          },
          "locations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LocationConstraintItem"
            }
          },
          "suggestLocation": {
            "type": "boolean"
          }
        }
      },
      "EmptySuggestionsReason": {
        "description": "Maps directly to [MSFT emptySuggestionsReason](https://learn.microsoft.com/en-us/graph/api/resources/meetingtimesuggestionsresult?view=graph-rest-1.0)",
        "type": "string",
        "enum": [
          "attendeesUnavailable",
          "attendeesUnavailableOrUnknown",
          "locationsUnavailable",
          "organizerUnavailable",
          "unknown"
        ]
      },
      "FreeBusyStatus": {
        "description": "Maps directly to [MSFT freebusyStatus](https://learn.microsoft.com/en-us/graph/api/resources/attendeeavailability?view=graph-rest-1.0)",
        "type": "string",
        "enum": [
          "free",
          "tentative",
          "busy",
          "oof",
          "workingElsewhere",
          "unknown"
        ]
      },
      "AttendeeAvailability": {
        "description": "Maps roughly to [MSFT attendeeAvailability](https://learn.microsoft.com/en-us/graph/api/resources/attendeeavailability?view=graph-rest-1.0)",
        "properties": {
          "availability": {
            "$ref": "#/components/schemas/FreeBusyStatus"
          },
          "attendee": {
            "$ref": "#/components/schemas/AttendeeBase"
          }
        },
        "required": [
          "availability",
          "attendee"
        ]
      },
      "MeetingTimeSlot": {
        "description": "Maps directly to [MSFT meetingTimeSlot](https://learn.microsoft.com/en-us/graph/api/resources/timeslot?view=graph-rest-1.0)",
        "type": "object",
        "properties": {
          "end": {
            "type": "string",
            "format": "date-time"
          },
          "start": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "end",
          "start"
        ]
      },
      "MeetingTimeSuggestion": {
        "description": "Maps roughly to [MSFT meetingTimeSuggestion](https://learn.microsoft.com/en-us/graph/api/resources/meetingtimesuggestion?view=graph-rest-1.0)",
        "type": "object",
        "properties": {
          "attendeeAvailability": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AttendeeAvailability"
            }
          },
          "confidence": {
            "type": "number",
            "format": "double"
          },
          "locations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Location"
            }
          },
          "meetingTimeSlot": {
            "$ref": "#/components/schemas/MeetingTimeSlot"
          },
          "order": {
            "type": "integer",
            "format": "int32"
          },
          "organizerAvailability": {
            "type": "string"
          },
          "suggestionReason": {
            "type": "string"
          }
        }
      },
      "SchedulingSlotsSuccessResponseBody": {
        "description": "Maps roughly to [MSFT meetingTimeSuggestionsResult](https://learn.microsoft.com/en-us/graph/api/resources/meetingtimesuggestionsresult?view=graph-rest-1.0)",
        "type": "object",
        "properties": {
          "emptySuggestionsReason": {
            "$ref": "#/components/schemas/EmptySuggestionsReason"
          },
          "meetingTimeSuggestions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MeetingTimeSuggestion"
            }
          }
        }
      },
      "AttendeeType": {
        "description": "Maps directly to [MSFT Attendee->type](https://learn.microsoft.com/en-us/graph/api/resources/attendee?view=graph-rest-1.0)",
        "type": "string",
        "enum": [
          "required",
          "optional",
          "resource"
        ]
      },
      "EmailAddress": {
        "type": "object",
        "description": "directly maps to MSFT Email Address, see info here:[MSFT EmailAddress Struct Docs](https://learn.microsoft.com/en-us/graph/api/resources/emailaddress?view=graph-rest-1.0)",
        "properties": {
          "address": {
            "type": "string",
            "format": "email"
          },
          "name": {
            "type": "string"
          }
        },
        "required": [
          "address",
          "name"
        ]
      },
      "AttendeeBase": {
        "type": "object",
        "description": "directly maps to [MSFT attendeeBase](https://learn.microsoft.com/en-us/graph/api/resources/attendeebase?view=graph-rest-1.0)",
        "properties": {
          "emailAddress": {
            "$ref": "#/components/schemas/EmailAddress"
          },
          "attendeeType": {
            "$ref": "#/components/schemas/AttendeeType"
          }
        },
        "required": [
          "emailAddress",
          "attendeeType"
        ]
      },
      "Attendee": {
        "description": "Maps roughly to [MSFT Attendee](https://learn.microsoft.com/en-us/graph/api/resources/attendee?view=graph-rest-1.0#properties)",
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "format": "email"
          },
          "attendeeType": {
            "$ref": "#/components/schemas/AttendeeType",
            "nullable": true
          },
          "responseStatus": {
            "type": "string",
            "enum": [
              "none",
              "organizer",
              "entativelyAccepted",
              "accepted",
              "declined",
              "notResponded"
            ],
            "nullable": true
          }
        },
        "required": [
          "email"
        ]
      },
      "CalendarEvent": {
        "description": "Maps roughly to [MSFT event](https://learn.microsoft.com/en-us/graph/api/resources/event?view=graph-rest-1.0#properties)",
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "attendees": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Attendee"
            }
          },
          "body": {
            "type": "string"
          },
          "created": {
            "type": "string",
            "format": "date-time"
          },
          "endTime": {
            "type": "string",
            "nullable": true
          },
          "isCancelled": {
            "type": "boolean"
          },
          "joinURL": {
            "description": "Maps roughly to [MSFT OnlineMeetingInfo->joinURL](https://learn.microsoft.com/en-us/graph/api/resources/onlinemeetinginfo?view=graph-rest-1.0#json-representation)",
            "type": "string",
            "nullable": true
          },
          "locations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Location"
            }
          },
          "organizer": {
            "description": "Maps roughly to [MSFT Recipient->emailAddress](https://learn.microsoft.com/en-us/graph/api/resources/recipient?view=graph-rest-1.0)",
            "type": "string",
            "format": "email"
          },
          "startTime": {
            "type": "string",
            "nullable": true
          },
          "subject": {
            "type": "string"
          },
          "webLink": {
            "type": "string"
          }
        },
        "required": [
          "attendees",
          "locations"
        ]
      },
      "InviteCreate": {
        "description": "Invite create request body",
        "type": "object",
        "properties": {
          "slotifyGroupID": {
            "type": "integer",
            "format": "uint32"
          },
          "expiryDate": {
            "type": "string",
            "format": "date"
          },
          "toUserID": {
            "type": "integer",
            "format": "uint32"
          },
          "message": {
            "type": "string"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "slotifyGroupID",
          "toUserID",
          "message",
          "createdAt",
          "expiryDate"
        ]
      },
      "InviteStatus": {
        "description": "Invite status",
        "type": "string",
        "enum": [
          "accepted",
          "declined",
          "expired",
          "pending"
        ]
      },
      "InvitesGroup": {
        "description": "References a Slotify Invite For a Group",
        "type": "object",
        "properties": {
          "inviteID": {
            "type": "integer",
            "format": "uint32"
          },
          "message": {
            "type": "string"
          },
          "status": {
            "$ref": "#/components/schemas/InviteStatus"
          },
          "expiryDate": {
            "type": "string",
            "format": "date"
          },
          "fromUserEmail": {
            "type": "string",
            "format": "email"
          },
          "fromUserFirstName": {
            "type": "string"
          },
          "fromUserLastName": {
            "type": "string"
          },
          "toUserEmail": {
            "type": "string",
            "format": "email"
          },
          "toUserFirstName": {
            "type": "string"
          },
          "toUserLastName": {
            "type": "string"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "expiryDate",
          "inviteID",
          "message",
          "fromUserEmail",
          "fromUserFirstName",
          "fromUserLastName",
          "toUserEmail",
          "toUserFirstName",
          "toUserLastName",
          "status",
          "createdAt"
        ]
      },
      "InvitesMe": {
        "description": "References a Slotify Invite",
        "type": "object",
        "properties": {
          "inviteID": {
            "type": "integer",
            "format": "uint32"
          },
          "message": {
            "description": "invite message",
            "type": "string"
          },
          "expiryDate": {
            "type": "string",
            "format": "date"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "status": {
            "$ref": "#/components/schemas/InviteStatus"
          },
          "fromUserEmail": {
            "description": "from user email",
            "type": "string",
            "format": "email"
          },
          "slotifyGroupName": {
            "description": "slotify group name",
            "type": "string"
          },
          "fromUserFirstName": {
            "description": "from user first name",
            "type": "string"
          },
          "fromUserLastName": {
            "description": "from user last name",
            "type": "string"
          }
        },
        "required": [
          "expiryDate",
          "inviteID",
          "fromUserEmail",
          "slotifyGroupName",
          "message",
          "fromUserFirstName",
          "fromUserLastName",
          "status",
          "createdAt"
        ]
      },
      "Location": {
        "description": "Maps roughly to [MSFT Location](https://learn.microsoft.com/en-us/graph/api/resources/location?view=graph-rest-1.0)",
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "roomType": {
            "type": "string",
            "enum": [
              "default",
              "conferenceRoom",
              "homeAddress",
              "businessAddress",
              "geoCoordinates",
              "streetAddress",
              "hotel",
              "restaurant",
              "localBusiness",
              "postalAddress"
            ],
            "nullable": true
          },
          "street": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "Notification": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "uint32"
          },
          "message": {
            "type": "string"
          },
          "created": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "id",
          "message",
          "created"
        ]
      },
      "UserCreate": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "format": "email"
          },
          "firstName": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          }
        },
        "required": [
          "email",
          "firstName",
          "lastName"
        ]
      },
      "User": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "uint32"
          },
          "email": {
            "type": "string",
            "format": "email"
          },
          "firstName": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "email",
          "firstName",
          "lastName"
        ]
      },
      "SlotifyGroupCreate": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          }
        },
        "required": [
          "name"
        ]
      },
      "SlotifyGroup": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "uint32"
          },
          "name": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "name"
        ]
      },
      "MSFTGroup": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "name"
        ]
      },
      "MSFTUser": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "format": "email"
          },
          "firstName": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          }
        },
        "required": [
          "email",
          "firstName",
          "lastName"
        ]
      },
      "Room": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "format": "email"
          },
          "name": {
            "type": "string"
          }
        },
        "required": [
          "email",
          "name"
        ]
      }
    }
  }
}
